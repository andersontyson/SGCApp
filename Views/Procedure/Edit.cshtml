@model SGCApp.Models.ProcedureViewModel
@using Syncfusion.EJ2;

@{
    ViewData["Title"] = "Editar Procedimiento";
    Layout = "~/Views/Shared/_Layout.cshtml";
   }

@section ControlsSection {
    <div class="control-section">
        <div id='documenteditor_titlebar' class="e-de-ctn-title"></div>
        <form asp-action="Edit" asp-controller="Procedure" enctype="multipart/form-data" method="post">
            <input type="hidden" name="Id" value="@Model.Id" />
            <input type="hidden" name="Content" id="documentContent" />

            <ejs-documenteditorcontainer id="container" enableToolbar=true height="590px"></ejs-documenteditorcontainer>

            <div class="button-container">
                <button type="submit" class="e-btn e-primary">Guardar</button>
                <button type="button" id="cancelButton" class="e-btn e-secondary">Cancelar</button>
            </div>
        </form>
    </div>

    <style>
        #documenteditor_titlebar {
            height: 36px;
            line-height: 26px;
            width: 100%;
            font-size: 12px;
            padding-left: 15px;
            padding-right: 10px;
            font-family: inherit;
        }

        #documenteditor_title_contentEditor {
            height: 26px;
            max-width: 85%;
            width: auto;
            overflow: hidden;
            display: inline-block;
            padding-left: 4px;
            padding-right: 4px;
            margin: 5px;
        }

        .single-line {
            cursor: text !important;
            outline: none;
        }

            .single-line:hover {
                border-color: #e4e4e4 !important;
            }

        [contenteditable="true"].single-line {
            white-space: nowrap;
            border-color: #e4e4e4 !important;
        }

        /** Document editor sample level font icons*/
        @@font-face {
            font-family: 'Sample brower icons';
            font-weight: normal;
            font-style: normal;
        }

        [class^="e-de-icon-"],
        [class*=" e-de-icon-"] {
            font-family: 'Sample brower icons' !important;
        }

        .e-de-icon-Print:before {
            content: "\e723";
        }

        .e-de-icon-Download:before {
            content: "\e728";
        }

        /** sample level font icons ends*/
    </style>
}

@section Scripts {
    <script>
        var documenteditor;
        document.addEventListener('DOMContentLoaded', function () {
            var documenteditorElement = document.getElementById("container");
            var container = documenteditorElement.ej2_instances[0];
            container.showPropertiesPane = true;
            documenteditor = container.documentEditor;
            documenteditorElement.ej2_instances[0].serviceUrl = window.baseurl + 'api/documenteditor/';
            documenteditor.serviceUrl = window.baseurl + 'api/documenteditor/';

            // Fetch document data from ProcedureController
            fetch('@Url.Action("GetDocument", "Procedure", new { id = Model.Id })')
                .then(response => response.json())
                .then(data => {
                    var fileContent = atob(data.content); // Decode Base64
                    var arrayBuffer = new ArrayBuffer(fileContent.length);
                    var uint8Array = new Uint8Array(arrayBuffer);
                    for (var i = 0; i < fileContent.length; i++) {
                        uint8Array[i] = fileContent.charCodeAt(i);
                    }
                    var blob = new Blob([arrayBuffer], { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' });

                    var formData = new FormData();
                    formData.append('files', blob, data.fileName);

                    // Send the file to DocumentEditorController
                    fetch(documenteditor.serviceUrl + 'Import', {
                        method: 'POST',
                        body: formData
                    })
                        .then(response => response.json())
                        .then(docData => {
                            documenteditor.open(JSON.stringify(docData));
                            documenteditor.documentName = data.fileName;
                            updateDocumentTitle();
                        });
                });

            container.documentChange = function (args) {
                updateDocumentTitle();
            };

            titleBarDiv = document.getElementById('documenteditor_titlebar');
            initComponentAndWireEvent();

            // Guardar el documento
            document.querySelector('form').addEventListener('submit', function (e) {
                e.preventDefault();
                documenteditor.saveAsBlob('Docx').then(function (blob) {
                    var reader = new FileReader();
                    reader.onload = function () {
                        var base64String = reader.result.split(',')[1];
                        document.getElementById('documentContent').value = base64String;
                        e.target.submit();
                    };
                    reader.readAsDataURL(blob);
                });
            });

            // Cancelar la edición
            document.getElementById('cancelButton').addEventListener('click', function () {
                window.location.href = '@Url.Action("Index", "Procedure")';
            });
        });
    </script>
}
